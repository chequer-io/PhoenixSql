package com.chequer.phoenixsql.util;

import com.chequer.phoenixsql.proto.Nodes;
import com.google.gson.Gson;
import org.apache.hadoop.hbase.filter.CompareFilter;
import org.apache.hadoop.hbase.security.access.Permission;
import org.apache.hadoop.hbase.util.Pair;
import org.apache.phoenix.expression.LiteralExpression;
import org.apache.phoenix.jdbc.PhoenixStatement;
import org.apache.phoenix.parse.*;
import org.apache.phoenix.schema.*;
import org.apache.phoenix.schema.types.*;

import java.util.List;
import java.util.Map;
import java.util.function.Consumer;
import java.util.function.Function;

public class NodeConverter {
    private static final Gson gson = new Gson();

:Body:

    private static String convert(LiteralExpression value) {
        return value.toString();
    }

    private static Nodes.PDataType convert(PDataType<?> value) {
        if (value instanceof PUnsignedDate) {
            return Nodes.PDataType.PUnsignedDate;
        } else if (value instanceof PArrayDataType) {
            return Nodes.PDataType.PArrayDataType;
        } else if (value instanceof PBinaryBase) {
            return Nodes.PDataType.PBinaryBase;
        } else if (value instanceof PBoolean) {
            return Nodes.PDataType.PBoolean;
        } else if (value instanceof PChar) {
            return Nodes.PDataType.PChar;
        } else if (value instanceof PDate) {
            return Nodes.PDataType.PDate;
        } else if (value instanceof PNumericType) {
            return Nodes.PDataType.PNumericType;
        } else if (value instanceof PTime) {
            return Nodes.PDataType.PTime;
        } else if (value instanceof PTimestamp) {
            return Nodes.PDataType.PTimestamp;
        } else if (value instanceof PUnsignedTime) {
            return Nodes.PDataType.PUnsignedTime;
        }

        // PVarchar
        return Nodes.PDataType.PVarchar;
    }

    private static Nodes.PName.Builder convert(PName value) {
        var builder = Nodes.PName.newBuilder();

        var v0 = value.getString();
        if (v0 != null) builder.setValue(v0);

        return builder;
    }

    private static String convert(Object value) {
        return gson.toJson(value);
    }

    private static void addAll(Map<String, UDFParseNode> udfMap, Consumer<Nodes.UDFMapEntry.Builder> add) {
        if (udfMap == null || udfMap.isEmpty()) {
            return;
        }

        for (final var node : udfMap.entrySet()) {
            var entry = Nodes.UDFMapEntry.newBuilder();
            entry.setKey(node.getKey());
            entry.setValue(convert(node.getValue()));
            add.accept(entry);
        }
    }

    private static <TNode, TProto> void addAll(List<TNode> source, Function<TNode, TProto> convert, Consumer<TProto> add) {
        if (source == null || source.isEmpty()) {
            return;
        }

        for (final var node : source) {
            add.accept(convert.apply(node));
        }
    }

    private static <TNode, TProto> void addAll(TNode[] source, Function<TNode, TProto> convert, Consumer<TProto> add) {
        if (source == null || source.length == 0) {
            return;
        }

        for (final var node : source) {
            add.accept(convert.apply(node));
        }
    }
}
