syntax = "proto3";

package proto;

option csharp_namespace = "PhoenixSql.Proto";
option java_package = "com.chequer.phoenixsql.proto";

// apache/phoenix/schema/types/PDataType.java
//  ├ apache/phoenix/schema/types/PUnsignedDate.java
//  ├ apache/phoenix/schema/types/PArrayDataType.java
//  ├ apache/phoenix/schema/types/PBinaryBase.java
//  ├ apache/phoenix/schema/types/PBoolean.java
//  ├ apache/phoenix/schema/types/PChar.java
//  ├ apache/phoenix/schema/types/PDate.java
//  ├ apache/phoenix/schema/types/PNumericType.java
//  ├ apache/phoenix/schema/types/PTime.java
//  ├ apache/phoenix/schema/types/PTimestamp.java
//  ├ apache/phoenix/schema/types/PUnsignedTime.java
//  └ apache/phoenix/schema/types/PVarchar.java
enum PDataType {
    PUnsignedDate = 0;
    PArrayDataType = 1;
    PBinaryBase = 2;
    PBoolean = 3;
    PChar = 4;
    PDate = 5;
    PNumericType = 6;
    PTime = 7;
    PTimestamp = 8;
    PUnsignedTime = 9;
    PVarchar = 10;
}

// apache/phoenix/jdbc/PhoenixStatement.java
enum StatementOperation {
    Query = 0;
    Delete = 1;
    Upsert = 2;
    Upgrade = 3;
    Admin = 4;
}

//  ├ apache/phoenix/parse/AddParseNode.java
//  ├ apache/phoenix/parse/SubtractParseNode.java
//  ├ apache/phoenix/parse/MultiplyParseNode.java
//  ├ apache/phoenix/parse/DivideParseNode.java
//  └ apache/phoenix/parse/ModulusParseNode.java
enum Operator {
    Add = 0;
    Subtract = 1;
    Multiply = 2;
    Divide = 3;
    Modulus = 4;
}

//  ├ apache/phoenix/parse/LessThanOrEqualParseNode.java
//  ├ apache/phoenix/parse/EqualParseNode.java
//  ├ apache/phoenix/parse/GreaterThanOrEqualParseNode.java
//  ├ apache/phoenix/parse/GreaterThanParseNode.java
//  ├ apache/phoenix/parse/LessThanParseNode.java
//  └ apache/phoenix/parse/NotEqualParseNode.java
enum ComparisonType {
    LessThanOrEqual = 0;
    Equal = 1;
    GreaterThanOrEqual = 2;
    GreaterThan = 3;
    LessThan = 4;
    NotEqual = 5;
}

//  ├ apache/phoenix/parse/ArrayAnyComparisonNode.java
//  └ apache/phoenix/parse/ArrayAllComparisonNode.java
enum ArrayComparisonType {
    Any = 0;
    All = 1;
}

enum LikeType {
    CASE_SENSITIVE = 0;
    CASE_INSENSITIVE = 1;
}

enum Hint {
    RANGE_SCAN = 0;
    SKIP_SCAN = 1;
    NO_CHILD_PARENT_JOIN_OPTIMIZATION = 2;
    NO_INDEX = 3;
    INDEX = 4;
    USE_DATA_OVER_INDEX_TABLE = 5;
    USE_INDEX_OVER_DATA_TABLE = 6;
    NO_CACHE = 7;
    USE_SORT_MERGE_JOIN = 8;
    USE_PERSISTENT_CACHE = 9;
    NO_STAR_JOIN = 10;
    SEEK_TO_COLUMN = 11;
    NO_SEEK_TO_COLUMN = 12;
    SMALL = 13;
    SERIAL = 14;
    FORWARD_SCAN = 15;
    HASH_AGGREGATE = 16;
}

enum FunctionClassType {
    NONE = 0;
    ABSTRACT = 1;
    DERIVED = 2;
    ALIAS = 3;
    UDF = 4;
}

enum JoinType {
    Inner = 0;
    Left = 1;
    Right = 2;
    Full = 3;
    Semi = 4;
    Anti = 5;
}

enum SortOrder {
    ASC = 0;
    DESC = 1;
}